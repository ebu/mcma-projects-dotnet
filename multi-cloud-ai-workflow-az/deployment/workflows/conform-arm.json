{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "mediaStorageConnectionId": { "type": "string" },
        "mediaStorageAccountName": { "type": "string" },
        "repositoryContainerName": { "type": "string" }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "ConformWorkflow",
            "location": "[resourceGroup().location]",
            "properties": {
                "state": "Enabled",
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[parameters('mediaStorageConnectionId')]",
                                "connectionName": "[parameters('mediaStorageAccountName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            }
                        }
                    },
                    "mediaStorageAccountName": {
                        "value": "[parameters('mediaStorageAccountName')]"
                    },
                    "repositoryContainerName": {
                        "value": "[parameters('repositoryContainerName')]"
                    }
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "actions": {
                        "Execute": {
                            "actions": {
                                "GetInputFileMetadata": {
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/datasets/default/GetFileByPath",
                                        "queries": {
                                            "path": "@variables('InputFilePath')",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                },
                                "HasValidationErrors": {
                                    "actions": {},
                                    "else": {
                                        "actions": {
                                            "CopySourceToRepositoryStorage": {
                                                "inputs": {
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/copyFile",
                                                    "queries": {
                                                        "destination": "@{concat(parameters('repositoryContainerName'), '/', variables('RepFilePath'))}",
                                                        "overwrite": false,
                                                        "queryParametersSingleEncoded": true,
                                                        "source": "@variables('InputFilePath')"
                                                    }
                                                },
                                                "runAfter": {
                                                    "UpdateProgressTo9": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection"
                                            },
                                            "CreateBMContent": {
                                                "inputs": {
                                                    "body": "@addProperty(addProperty(variables('BMContent'), 'name', triggerBody()?['input']?['metadata']?['name']), 'description', triggerBody()?['input']?['metadata']?['description'])",
                                                    "method": "POST",
                                                    "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                },
                                                "runAfter": {
                                                    "UpdateProgressTo18": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http"
                                            },
                                            "CreateExtractTechnicalMetadataAmeJob": {
                                                "inputs": {
                                                    "subscribe": {
                                                        "body": "@addProperty(addProperty(addProperty(json('{ \"@type\": \"AmeJob\" }'), 'jobProfile', body('GetExtractTechnicalMetadataProfile')?[0]?['id']), 'jobInput', addProperty(addProperty(json('{ \"@type\": \"JobParameterBag\" }'), 'inputFile', variables('RepLocator')), 'outputLocation', addProperty(addProperty(addProperty(json('{ \"@type\": \"BlobStorageFolderLocator\" }'), 'storageAccountName', parameters('mediaStorageAccountName')), 'container', parameters('repositoryContainerName')), 'folderPath', 'AmeJobResults'))), 'notificationEndpoint', json(concat('{ \"httpEndpoint\": \"', listCallbackUrl(), '\" }')))",
                                                        "method": "POST",
                                                        "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                    },
                                                    "unsubscribe": {}
                                                },
                                                "runAfter": {
                                                    "GetExtractTechnicalMetadataProfile": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "HttpWebhook"
                                            },
                                            "GetExtractTechnicalMetadataProfile": {
                                                "inputs": {
                                                    "method": "GET",
                                                    "uri": "@{concat(triggerBody()?['jobProfilesEndpoint'], '&name=ExtractTechnicalMetadata')}"
                                                },
                                                "runAfter": {
                                                    "UpdateProgressTo27": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http"
                                            },
                                            "UpdateProgressTo18": {
                                                "inputs": {
                                                    "body": {
                                                        "progress": 18,
                                                        "status": "Running"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                },
                                                "runAfter": {
                                                    "CopySourceToRepositoryStorage": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http"
                                            },
                                            "UpdateProgressTo27": {
                                                "inputs": {
                                                    "body": {
                                                        "progress": 27,
                                                        "status": "Running"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                },
                                                "runAfter": {
                                                    "CreateBMContent": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http"
                                            },
                                            "UpdateProgressTo36": {
                                                "inputs": {
                                                    "body": {
                                                        "progress": 36,
                                                        "status": "Running"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                },
                                                "runAfter": {
                                                    "CreateExtractTechnicalMetadataAmeJob": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http"
                                            },
                                            "UpdateProgressTo9": {
                                                "inputs": {
                                                    "body": {
                                                        "progress": 9,
                                                        "status": "Running"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                },
                                                "runAfter": {},
                                                "type": "Http"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(variables('Errors'))",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "IsMetadataDescriptionMissing": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "IsMetadataDescriptionMissing": {
                                    "actions": {
                                        "AddMissingMetadataDescriptionError": {
                                            "inputs": {
                                                "name": "Errors",
                                                "value": "@json('{ \"actionName\": \"IsMetadataDescriptionMissing\", \"errorMessage\": \"input.metadata.description is missing.\" }')"
                                            },
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@triggerBody()?['input']?['metadata']?['description']",
                                                    null
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "IsMetadataNameMissing": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "IsMetadataNameMissing": {
                                    "actions": {
                                        "AddMissingMetadataNameError": {
                                            "inputs": {
                                                "name": "Errors",
                                                "value": "@json('{ \"actionName\": \"IsMetadataNameMissing\", \"errorMessage\": \"input.metadata.name is missing.\" }')"
                                            },
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@triggerBody()?['input']?['metadata']?['name']",
                                                    "@null"
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "GetInputFileMetadata": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "InitializeRepLocatorVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "HandleErrors": {
                            "actions": {
                                "Compose": {
                                    "inputs": "@union(variables('Errors'), body('SelectActionErrors'))",
                                    "runAfter": {
                                        "SelectActionErrors": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "FilterForFailedActions": {
                                    "inputs": {
                                        "from": "@result('Execute')",
                                        "where": "@and(equals(item()['status'], 'Failed'), notEquals(item()['outputs']?['body'], null))"
                                    },
                                    "runAfter": {},
                                    "type": "Query"
                                },
                                "SelectActionErrors": {
                                    "inputs": {
                                        "from": "@body('FilterForFailedActions')",
                                        "select": "@addProperty(item()['outputs']['body'], 'actionName', item()['name'])"
                                    },
                                    "runAfter": {
                                        "FilterForFailedActions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select"
                                },
                                "Set_variable": {
                                    "inputs": {
                                        "name": "Errors",
                                        "value": "@outputs('Compose')"
                                    },
                                    "runAfter": {
                                        "Compose": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable"
                                }
                            },
                            "runAfter": {
                                "Execute": [
                                    "Failed"
                                ]
                            },
                            "type": "Scope"
                        },
                        "HasErrors": {
                            "actions": {
                                "NotifyOnError": {
                                    "inputs": {
                                        "body": "@concat('{ \"status\": \"Failed\", \"errors\": ', variables('Errors'), ' }')",
                                        "method": "POST",
                                        "uri": "@triggerBody()?['notificationEndpoint']"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                }
                            },
                            "else": {
                                "actions": {
                                    "NotifyOnSuccess": {
                                        "inputs": {
                                            "body": {
                                                "progress": "100",
                                                "status": "COMPLETED"
                                            },
                                            "method": "POST",
                                            "uri": "@triggerBody()?['notificationEndpoint']"
                                        },
                                        "runAfter": {},
                                        "type": "Http"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@variables('Errors')",
                                                null
                                            ]
                                        }
                                    },
                                    {
                                        "greater": [
                                            "@length(variables('Errors'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "HandleErrors": [
                                    "Succeeded",
                                    "Skipped"
                                ]
                            },
                            "type": "If"
                        },
                        "InitializeBMContentVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "BMContent",
                                        "type": "Object",
                                        "value": "@json('{ \"@type\": \"BMContent\", \"awsAiMetadata\": {}, \"azureAiMetadata\": {} }')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeRepFilePathVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeErrorsVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Errors",
                                        "type": "Array",
                                        "value": "@json('[]')"
                                    }
                                ]
                            },
                            "runAfter": {},
                            "type": "InitializeVariable"
                        },
                        "InitializeInputFilePathVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "InputFilePath",
                                        "type": "String",
                                        "value": "@{concat(triggerBody()?['input']?['inputFile']?['container'], '/', triggerBody()?['input']?['inputFile']?['filePath'])}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeErrorsVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeRepFilePathVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RepFilePath",
                                        "type": "String",
                                        "value": "@{concat(formatDateTime(utcNow(), 'yyMMdd'), '/', guid(), if(greaterOrEquals(lastIndexOf(variables('InputFilePath'), '.'), 0), substring(variables('InputFilePath'), lastIndexOf(variables('InputFilePath'), '.')), ''))}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeInputFilePathVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeRepLocatorVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RepLocator",
                                        "type": "Object",
                                        "value": "@json(concat('{ \"@type\": \"BlobStorageFileLocator\", \"storageAccountName\": \"\", \"container\": \"', parameters('repositoryContainerName'), '\", \"filePath\": \"', variables('RepFilePath'), '\" }'))"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeBMContentVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "mediaStorageAccountName": {
                            "defaultValue": "triskeldevmedia",
                            "type": "String"
                        },
                        "repositoryContainerName": {
                            "defaultValue": "triskel-dev-repository",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "HttpTrigger": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "input": {
                                            "properties": {
                                                "@@type": {
                                                    "type": "string"
                                                },
                                                "inputFile": {
                                                    "properties": {
                                                        "@@type": {
                                                            "type": "string"
                                                        },
                                                        "container": {
                                                            "type": "string"
                                                        },
                                                        "filePath": {
                                                            "type": "string"
                                                        },
                                                        "storageAccountName": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "metadata": {
                                                    "properties": {
                                                        "@@type": {
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "type": "string"
                                                        },
                                                        "title": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "jobProfilesEndpoint": {
                                            "type": "string"
                                        },
                                        "notificationEndpoint": {
                                            "type": "string"
                                        },
                                        "resourceEndpoint": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "type": "Request"
                        }
                    }
                }
            }
        }
    ]
}