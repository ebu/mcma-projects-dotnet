{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "tenantId": { "type": "string" },
        "clientId": { "type": "string" },
        "clientSecret": { "type": "string" },
        "mediaStorageConnectionId": { "type": "string" },
        "mediaStorageAccountName": { "type": "string" },
        "repositoryContainerName": { "type": "string" },
        "tempContainerName": { "type": "string" },
        "previewContainerName": { "type": "string" }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "ConformWorkflow",
            "location": "[resourceGroup().location]",
            "identity": {
               "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob-media": {
                                "connectionId": "[parameters('mediaStorageConnectionId')]",
                                "connectionName": "[parameters('mediaStorageAccountName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            }
                        }
                    },
                    "tenantId": {
                        "value": "[parameters('tenantId')]"
                    },
                    "clientId": {
                        "value": "[parameters('clientId')]"
                    },
                    "clientSecret": {
                        "value": "[parameters('clientSecret')]"
                    },
                    "mediaStorageAccountName": {
                        "value": "[parameters('mediaStorageAccountName')]"
                    },
                    "repositoryContainerName": {
                        "value": "[parameters('repositoryContainerName')]"
                    },
                    "tempContainerName": {
                        "value": "[parameters('tempContainerName')]"
                    },
                    "previewContainerName": {
                        "value": "[parameters('previewContainerName')]"
                    }
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "actions": {
                        "Execute": {
                            "actions": {
                                "BuildErrorsObjectInternal": {
                                    "inputs": "@union(variables('Errors'), body('SelectActionErrorsInternal'))",
                                    "runAfter": {
                                        "SelectActionErrorsInternal": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "FilterForFailedActionsInternal": {
                                    "inputs": {
                                        "from": "@result('PassedValidation')",
                                        "where": "@and(equals(item()['status'], 'Failed'), or(not(equals(item()?['outputs']?['body'], null)), not(equals(item()?['error'], null))))"
                                    },
                                    "runAfter": {
                                        "PassedValidation": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Query"
                                },
                                "GetInputFileMetadata": {
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/datasets/default/GetFileByPath",
                                        "queries": {
                                            "path": "@variables('InputFilePath')",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                },
                                "IsMetadataDescriptionMissing": {
                                    "actions": {
                                        "AddMissingMetadataDescriptionError": {
                                            "inputs": {
                                                "name": "Errors",
                                                "value": "@json('{ \"actionName\": \"IsMetadataDescriptionMissing\", \"errorMessage\": \"input.metadata.description is missing.\" }')"
                                            },
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@triggerBody()?['input']?['metadata']?['description']",
                                                    null
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "IsMetadataNameMissing": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "IsMetadataNameMissing": {
                                    "actions": {
                                        "AddMissingMetadataNameError": {
                                            "inputs": {
                                                "name": "Errors",
                                                "value": "@json('{ \"actionName\": \"IsMetadataNameMissing\", \"errorMessage\": \"input.metadata.name is missing.\" }')"
                                            },
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@triggerBody()?['input']?['metadata']?['name']",
                                                    "@null"
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "GetInputFileMetadata": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "PassedValidation": {
                                    "actions": {
                                        "AddSourceEssenceToBMContent": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": "@setProperty(body('CreateBMContent'), 'bmEssences', union(body('CreateBMContent')?['bmEssences'], createArray(body('CreateSourceEssence')?['id'])))",
                                                "method": "PUT",
                                                "uri": "@{triggerBody()?['resourceEndpoint']}"
                                            },
                                            "runAfter": {
                                                "CreateSourceEssence": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "CopySourceToRepositoryStorage": {
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/datasets/default/copyFile",
                                                "queries": {
                                                    "destination": "@{concat(parameters('repositoryContainerName'), '/', variables('RepFilePath'))}",
                                                    "overwrite": false,
                                                    "queryParametersSingleEncoded": true,
                                                    "source": "@variables('InputFilePath')"
                                                }
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo9": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection"
                                        },
                                        "CreateBMContent": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": "@addProperty(addProperty(variables('BMContent'), 'name', triggerBody()?['input']?['metadata']?['name']), 'description', triggerBody()?['input']?['metadata']?['description'])",
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['resourceEndpoint']}"
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo18": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "CreateSourceEssence": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": "@addProperty(addProperty(addProperty(json('{ \"@type\": \"BMEssence\" }'), 'bmContent', body('CreateBMContent')?['id']), 'locations', array(variables('SourceLocator'))), 'technicalMetadata', json(base64ToString(body('GetTechnicalMetadataFromStorage').$content)))",
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['resourceEndpoint']}"
                                            },
                                            "runAfter": {
                                                "GetTechnicalMetadataFromStorage": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "DecideIfTranscodeNeeded": {
                                            "actions": {
                                                "SetDecideTranscodeResultNone": {
                                                    "inputs": {
                                                        "name": "DecideTranscodeResult",
                                                        "value": "none"
                                                    },
                                                    "runAfter": {},
                                                    "type": "SetVariable"
                                                }
                                            },
                                            "else": {
                                                "actions": {
                                                    "IsDurationInPlaytimeFormat": {
                                                        "actions": {
                                                            "CheckPTDuration": {
                                                                "actions": {
                                                                    "SetDecideTranscodeResultPTShort": {
                                                                        "inputs": {
                                                                            "name": "DecideTranscodeResult",
                                                                            "value": "short"
                                                                        },
                                                                        "runAfter": {},
                                                                        "type": "SetVariable"
                                                                    }
                                                                },
                                                                "else": {
                                                                    "actions": {
                                                                        "SetDecideTranscodeResultPTLong": {
                                                                            "inputs": {
                                                                                "name": "DecideTranscodeResult",
                                                                                "value": "long"
                                                                            },
                                                                            "runAfter": {},
                                                                            "type": "SetVariable"
                                                                        }
                                                                    }
                                                                },
                                                                "expression": {
                                                                    "and": [
                                                                        {
                                                                            "lessOrEquals": [
                                                                                "@float(substring(variables('TechnicalMetadata')['normalPlaytime'], 3, sub(length(variables('TechnicalMetadata')['normalPlaytime']), 5)))",
                                                                                30
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "runAfter": {},
                                                                "type": "If"
                                                            }
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "CheckHHMMSSDuration": {
                                                                    "actions": {
                                                                        "SetDecideTranscodeResultHHMMSSShort": {
                                                                            "inputs": {
                                                                                "name": "DecideTranscodeResult",
                                                                                "value": "short"
                                                                            },
                                                                            "runAfter": {},
                                                                            "type": "SetVariable"
                                                                        }
                                                                    },
                                                                    "else": {
                                                                        "actions": {
                                                                            "SetDecideTranscodeResultHHMMSSLong": {
                                                                                "inputs": {
                                                                                    "name": "DecideTranscodeResult",
                                                                                    "value": "long"
                                                                                },
                                                                                "runAfter": {},
                                                                                "type": "SetVariable"
                                                                            }
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "or": [
                                                                            {
                                                                                "and": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@length(variables('TechnicalMetadata')['normalPlaytime'])",
                                                                                            9
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "equals": [
                                                                                            "@variables('TechnicalMetadata')['normalPlaytime'][2]",
                                                                                            "H"
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "lessOrEquals": [
                                                                                            "@add(mul(integer(substring(variables('TechnicalMetadata')['normalPlaytime'], 0, 2)), 3600), add(mul(integer(substring(variables('TechnicalMetadata')['normalPlaytime'], 3, 2)), 60), integer(substring(variables('TechnicalMetadata')['normalPlaytime'], 6, 2))))",
                                                                                            30
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "and": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@length(variables('TechnicalMetadata')['normalPlaytime'])",
                                                                                            6
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "equals": [
                                                                                            "@variables('TechnicalMetadata')['normalPlaytime'][2]",
                                                                                            "M"
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "lessOrEquals": [
                                                                                            "@add(mul(integer(substring(variables('TechnicalMetadata')['normalPlaytime'], 3, 2)), 60), integer(substring(variables('TechnicalMetadata')['normalPlaytime'], 6, 2)))",
                                                                                            30
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "and": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@length(variables('TechnicalMetadata')['normalPlaytime'])",
                                                                                            3
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "equals": [
                                                                                            "@variables('TechnicalMetadata')['normalPlaytime'][2]",
                                                                                            "S"
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "lessOrEquals": [
                                                                                            "@integer(substring(variables('TechnicalMetadata')['normalPlaytime'], 6, 2))",
                                                                                            30
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "runAfter": {},
                                                                    "type": "If"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "startsWith": [
                                                                        "@variables('TechnicalMetadata')['normalPlayTime']",
                                                                        "PT("
                                                                    ]
                                                                },
                                                                {
                                                                    "endsWith": [
                                                                        "@variables('TechnicalMetadata')['normalPlayTime']",
                                                                        ")S"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {},
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "or": [
                                                            {
                                                                "equals": [
                                                                    "@variables('TechnicalMetadata')['codec']",
                                                                    "mp42"
                                                                ]
                                                            },
                                                            {
                                                                "equals": [
                                                                    "@variables('TechnicalMetadata')['codec']",
                                                                    "isom"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "equals": [
                                                            "@variables('TechnicalMetadata')['format']",
                                                            "AVC"
                                                        ]
                                                    },
                                                    {
                                                        "lessOrEquals": [
                                                            "@float(variables('TechnicalMetadata')['bitRate'])",
                                                            "@mul(mul(mul(2, 1024), 1024), 8)"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "runAfter": {
                                                "SetTechnicalMetadataVar": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "FilterForPreviewLocator": {
                                            "inputs": {
                                                "from": "@variables('AiWorkflowInputEssence')['locations']",
                                                "where": "@equals(item()['container'], parameters('previewContainerName'))"
                                            },
                                            "runAfter": {
                                                "RunAiWorkflowJob": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Query"
                                        },
                                        "GetAiWorkflowProfile": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['jobProfilesEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "method": "GET",
                                                "uri": "@{concat(triggerBody()?['jobProfilesEndpoint'], '?name=AiWorkflow')}"
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo90": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "GetExtractTechnicalMetadataProfile": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['jobProfilesEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "method": "GET",
                                                "uri": "@{concat(triggerBody()?['jobProfilesEndpoint'], '?name=ExtractTechnicalMetadata')}"
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo27": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "GetTechnicalMetadataFromStorage": {
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/datasets/default/GetFileContentByPath",
                                                "queries": {
                                                    "inferContentType": true,
                                                    "path": "@{concat(body('RunExtractTechnicalMetadataAmeJob')?['jobOutput']?['outputFile']?['container'], '/', body('RunExtractTechnicalMetadataAmeJob')?['jobOutput']?['outputFile']?['filePath'])}",
                                                    "queryParametersSingleEncoded": true
                                                }
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo36": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection"
                                        },
                                        "RunAiWorkflowJob": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": "@addProperty(addProperty(json('{ \"@type\": \"WorkflowJob\" }'), 'jobProfile', body('GetAiWorkflowProfile')?[0]?['id']), 'jobInput', addProperty(addProperty(json('{ \"@type\": \"JobParameterBag\" }'), 'bmContent', body('CreateBMContent')?['id']), 'bmEssence', variables('AiWorkflowInputEssence')['id']))",
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['resourceEndpoint']}"
                                            },
                                            "runAfter": {
                                                "GetAiWorkflowProfile": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "RunExtractTechnicalMetadataAmeJob": {
                                            "inputs": {
                                                "subscribe": {
                                                    "authentication": {
                                                        "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                        "clientId": "@parameters('clientId')",
                                                        "secret": "@parameters('clientSecret')",
                                                        "tenant": "@parameters('tenantId')",
                                                        "type": "ActiveDirectoryOAuth"
                                                    },
                                                    "body": "@addProperty(addProperty(addProperty(json('{ \"@type\": \"AmeJob\" }'), 'jobProfile', body('GetExtractTechnicalMetadataProfile')?[0]?['id']), 'jobInput', addProperty(addProperty(json('{ \"@type\": \"JobParameterBag\" }'), 'inputFile', variables('SourceLocator')), 'outputLocation', addProperty(addProperty(addProperty(json('{ \"@type\": \"BlobStorageFolderLocator\" }'), 'storageAccountName', parameters('mediaStorageAccountName')), 'container', parameters('repositoryContainerName')), 'folderPath', 'AmeJobResults'))), 'notificationEndpoint', json(concat('{ \"httpEndpoint\": \"', listCallbackUrl(), '\" }')))",
                                                    "method": "POST",
                                                    "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                },
                                                "unsubscribe": {}
                                            },
                                            "runAfter": {
                                                "GetExtractTechnicalMetadataProfile": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "HttpWebhook"
                                        },
                                        "SetTechnicalMetadataVar": {
                                            "inputs": {
                                                "name": "TechnicalMetadata",
                                                "value": "@addProperty(addProperty(addProperty(addProperty(json('{}'), 'normalPlayTime', body('CreateSourceEssence')?['technicalMetadata']?['ebucore:ebuCoreMain']?['ebucore:coreMetadata']?[0]?['ebucore:format']?[0]?['ebucore:duration']?[0]?['ebucore:normalPlayTime']?[0]?['#value']), 'codec', body('CreateSourceEssence')?['technicalMetadata']?['ebucore:ebuCoreMain']?['ebucore:coreMetadata']?[0]?['ebucore:format']?[0]?['ebucore:containerFormat']?[0]?['ebucore:codec']?[0]?['ebucore:codecIdentifier']?[0]?['dc:identifier']?[0]?['#value']), 'bitRate', body('CreateSourceEssence')?['technicalMetadata']?['ebucore:ebuCoreMain']?['ebucore:coreMetadata']?[0]?['ebucore:format']?[0]?['ebucore:videoFormat']?[0]?['ebucore:bitRate']?[0]?['#value'] ), 'format', body('CreateSourceEssence')?['technicalMetadata']?['ebucore:ebuCoreMain']?['ebucore:coreMetadata']?[0]?['ebucore:format']?[0]?['ebucore:videoFormat']?[0]?['@videoFormatName'])"
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo45": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable"
                                        },
                                        "TranscodeIfNecessary": {
                                            "cases": {
                                                "Long": {
                                                    "actions": {},
                                                    "case": "long"
                                                },
                                                "Short": {
                                                    "actions": {
                                                        "GetCreateProxyProfile": {
                                                            "inputs": {
                                                                "authentication": {
                                                                    "audience": "@{triggerBody()?['jobProfilesEndpointAudience']}",
                                                                    "type": "ManagedServiceIdentity"
                                                                },
                                                                "method": "GET",
                                                                "uri": "@{concat(triggerBody()?['jobProfilesEndpoint'], '?name=CreateProxy')}"
                                                            },
                                                            "runAfter": {
                                                                "UpdateProgressTo54": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Http"
                                                        },
                                                        "RunCreateProxyTransformJob": {
                                                            "inputs": {
                                                                "subscribe": {
                                                                    "authentication": {
                                                                        "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                                        "clientId": "@parameters('clientId')",
                                                                        "secret": "@parameters('clientSecret')",
                                                                        "tenant": "@parameters('tenantId')",
                                                                        "type": "ActiveDirectoryOAuth"
                                                                    },
                                                                    "body": "@addProperty(addProperty(addProperty(json('{ \"@type\": \"TransformJob\" }'), 'jobProfile', body('GetCreateProxyProfile')?[0]?['id']), 'jobInput', addProperty(addProperty(json('{ \"@type\": \"JobParameterBag\" }'), 'inputFile', variables('SourceLocator')), 'outputLocation', addProperty(addProperty(addProperty(json('{ \"@type\": \"BlobStorageFolderLocator\" }'), 'storageAccountName', parameters('mediaStorageAccountName')), 'container', parameters('repositoryContainerName')), 'folderPath', 'TransformJobResults'))), 'notificationEndpoint', json(concat('{ \"httpEndpoint\": \"', listCallbackUrl(), '\" }')))",
                                                                    "method": "POST",
                                                                    "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                                },
                                                                "unsubscribe": {}
                                                            },
                                                            "runAfter": {
                                                                "GetCreateProxyProfile": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "HttpWebhook"
                                                        },
                                                        "SetProxyLocatorVar": {
                                                            "inputs": {
                                                                "name": "ProxyLocator",
                                                                "value": "@body('RunCreateProxyTransformJob')?['jobOutput']?['outputFile']"
                                                            },
                                                            "runAfter": {
                                                                "RunCreateProxyTransformJob": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable"
                                                        },
                                                        "UpdateProgressTo54": {
                                                            "inputs": {
                                                                "authentication": {
                                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                                    "type": "ManagedServiceIdentity"
                                                                },
                                                                "body": {
                                                                    "progress": 54,
                                                                    "status": "Running"
                                                                },
                                                                "method": "POST",
                                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                            },
                                                            "runAfter": {},
                                                            "type": "Http"
                                                        }
                                                    },
                                                    "case": "short"
                                                }
                                            },
                                            "default": {
                                                "actions": {}
                                            },
                                            "expression": "@variables('DecideTranscodeResult')",
                                            "runAfter": {
                                                "DecideIfTranscodeNeeded": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Switch"
                                        },
                                        "UpdateOutputs": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": "@addProperty(json('{ \"progress\": 99, \"status\": \"Running\" }'), 'output', addProperty(json(concat('{ \"aiWorkflow\": \"', body('RunAiWorkflowJob')?['id'], '\", \"bmContent\": \"', body('CreateBMContent')['id'], '\" }')), 'previewMediaFile', body('FilterForPreviewLocator')[0]))",
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "FilterForPreviewLocator": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo18": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "progress": 18,
                                                    "status": "Running"
                                                },
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "CopySourceToRepositoryStorage": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo27": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": "@json(concat('{ \"progress\": 27, \"status\": \"Running\", \"output\": { \"bmContent\": \"', body('CreateBMContent')?['id'], '\" } }'))",
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "CreateBMContent": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo36": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "progress": 36,
                                                    "status": "Running"
                                                },
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "RunExtractTechnicalMetadataAmeJob": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo45": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "progress": 45,
                                                    "status": "Running"
                                                },
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "AddSourceEssenceToBMContent": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo63": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "progress": 63,
                                                    "status": "Running"
                                                },
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "TranscodeIfNecessary": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo9": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "progress": 9,
                                                    "status": "Running"
                                                },
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {},
                                            "type": "Http"
                                        },
                                        "UpdateProgressTo90": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "progress": 90,
                                                    "status": "Running"
                                                },
                                                "method": "POST",
                                                "uri": "@{triggerBody()?['notificationEndpoint']}"
                                            },
                                            "runAfter": {
                                                "WasProxyGenerated": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "WasProxyGenerated": {
                                            "actions": {
                                                "AddProxyEssenceToBMContent": {
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "body": "@setProperty(body('AddSourceEssenceToBMContent'), 'locations', union(body('AddSourceEssenceToBMContent')?['locations'], createArray(body('CreateProxyEssence')?['id'])))",
                                                        "method": "PUT",
                                                        "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                    },
                                                    "runAfter": {
                                                        "CreateProxyEssence": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http"
                                                },
                                                "AddPreviewLocatorToProxyEssence": {
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "body": "@setProperty(body('CreateProxyEssence'), 'locators', union(body('CreateProxyEssence')['locations'], createArray(variables('PreviewLocator'))))",
                                                        "method": "PUT",
                                                        "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                    },
                                                    "runAfter": {
                                                        "UpdateProgressTo81Proxy": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http"
                                                },
                                                "CreateProxyBlobInPreviewContainer": {
                                                    "inputs": {
                                                        "body": "@body('GetProxyBlobContent')",
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/datasets/default/files",
                                                        "queries": {
                                                            "folderPath": "@{concat(variables('PreviewLocator')['container'], '/', substring(variables('PreviewLocator')['filePath'], 0, lastIndexOf(variables('PreviewLocator')['filePath'], '/')))}",
                                                            "name": "@{substring(variables('PreviewLocator')['filePath'], add(lastIndexOf(variables('PreviewLocator')['filePath'], '/'), 1))}",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "GetProxyBlobContent": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    },
                                                    "type": "ApiConnection"
                                                },
                                                "CreateProxyEssence": {
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "body": "@addProperty(addProperty(json('{ \"@type\": \"BMEssence\" }'), 'bmContent', body('CreateBMContent')?['id']), 'locations', array(variables('ProxyLocator')))",
                                                        "method": "POST",
                                                        "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                    },
                                                    "runAfter": {},
                                                    "type": "Http"
                                                },
                                                "GetProxyBlobContent": {
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                                            }
                                                        },
                                                        "method": "get",
                                                        "path": "/datasets/default/GetFileContentByPath",
                                                        "queries": {
                                                            "inferContentType": true,
                                                            "path": "@{concat(variables('ProxyLocator')['container'], '/', variables('ProxyLocator')['filePath'])}",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "UpdateProgressTo72": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection"
                                                },
                                                "SetAiWorkflowInputEssenceToProxy": {
                                                    "inputs": {
                                                        "name": "AiWorkflowInputEssence",
                                                        "value": "@body('AddPreviewLocatorToProxyEssence')"
                                                    },
                                                    "runAfter": {
                                                        "AddPreviewLocatorToProxyEssence": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable"
                                                },
                                                "UpdateProgressTo72": {
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "body": {
                                                            "progress": 72,
                                                            "status": "Running"
                                                        },
                                                        "method": "POST",
                                                        "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                    },
                                                    "runAfter": {
                                                        "AddProxyEssenceToBMContent": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http"
                                                },
                                                "UpdateProgressTo81Proxy": {
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "body": {
                                                            "progress": 81,
                                                            "status": "Running"
                                                        },
                                                        "method": "POST",
                                                        "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                    },
                                                    "runAfter": {
                                                        "CreateProxyBlobInPreviewContainer": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http"
                                                }
                                            },
                                            "else": {
                                                "actions": {
                                                    "AddPreviewLocatorToSourceEssence": {
                                                        "inputs": {
                                                            "authentication": {
                                                                "audience": "@{triggerBody()?['resourceEndpointAudience']}",
                                                                "type": "ManagedServiceIdentity"
                                                            },
                                                            "body": "@setProperty(body('CreateSourceEssence'), 'locations', union(body('CreateSourceEssence')['locations'], createArray(variables('PreviewLocator'))))",
                                                            "method": "PUT",
                                                            "uri": "@{triggerBody()?['resourceEndpoint']}"
                                                        },
                                                        "runAfter": {
                                                            "UpdateProgressTo81Source": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Http"
                                                    },
                                                    "CreateSourceBlobInPreviewContainer": {
                                                        "inputs": {
                                                            "body": "@body('GetSourceBlobContent')",
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/datasets/default/files",
                                                            "queries": {
                                                                "folderPath": "@{concat(variables('PreviewLocator')['container'], '/', substring(variables('PreviewLocator')['filePath'], 0, lastIndexOf(variables('PreviewLocator')['filePath'], '/')))}",
                                                                "name": "@{substring(variables('PreviewLocator')['filePath'], add(lastIndexOf(variables('PreviewLocator')['filePath'], '/'), 1))}",
                                                                "queryParametersSingleEncoded": true
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GetSourceBlobContent": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "runtimeConfiguration": {
                                                            "contentTransfer": {
                                                                "transferMode": "Chunked"
                                                            }
                                                        },
                                                        "type": "ApiConnection"
                                                    },
                                                    "GetSourceBlobContent": {
                                                        "inputs": {
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azureblob-media']['connectionId']"
                                                                }
                                                            },
                                                            "method": "get",
                                                            "path": "/datasets/default/GetFileContentByPath",
                                                            "queries": {
                                                                "inferContentType": true,
                                                                "path": "@{concat(variables('SourceLocator')['container'], '/', variables('SourceLocator')['filePath'])}",
                                                                "queryParametersSingleEncoded": true
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "type": "ApiConnection"
                                                    },
                                                    "SetAiWorkflowInputEssenceToSource": {
                                                        "inputs": {
                                                            "name": "AiWorkflowInputEssence",
                                                            "value": "@body('AddPreviewLocatorToSourceEssence')"
                                                        },
                                                        "runAfter": {
                                                            "AddPreviewLocatorToSourceEssence": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable"
                                                    },
                                                    "UpdateProgressTo81Source": {
                                                        "inputs": {
                                                            "authentication": {
                                                                "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                                "type": "ManagedServiceIdentity"
                                                            },
                                                            "body": {
                                                                "progress": 81,
                                                                "status": "Running"
                                                            },
                                                            "method": "POST",
                                                            "uri": "@{triggerBody()?['notificationEndpoint']}"
                                                        },
                                                        "runAfter": {
                                                            "CreateSourceBlobInPreviewContainer": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Http"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@variables('ProxyLocator')",
                                                                "@null"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "runAfter": {
                                                "UpdateProgressTo63": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@length(variables('Errors'))",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "IsMetadataDescriptionMissing": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "SelectActionErrorsInternal": {
                                    "inputs": {
                                        "from": "@body('FilterForFailedActionsInternal')",
                                        "select": "@addProperty(coalesce(item()?['outputs']?['body'], item()?['error']), 'actionName', item()['name'])"
                                    },
                                    "runAfter": {
                                        "FilterForFailedActionsInternal": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select"
                                },
                                "SetErrorsVarInternal": {
                                    "inputs": {
                                        "name": "Errors",
                                        "value": "@outputs('BuildErrorsObjectInternal')"
                                    },
                                    "runAfter": {
                                        "BuildErrorsObjectInternal": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable"
                                }
                            },
                            "runAfter": {
                                "InitializeAiWorkflowInputEssenceVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "HandleErrors": {
                            "actions": {
                                "BuildErrorsObject": {
                                    "inputs": "@union(variables('Errors'), body('SelectActionErrors'))",
                                    "runAfter": {
                                        "SelectActionErrors": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "FilterForFailedActions": {
                                    "inputs": {
                                        "from": "@result('Execute')",
                                        "where": "@and(equals(item()['status'], 'Failed'), or(not(equals(item()?['outputs']?['body'], null)), not(equals(item()?['error'], null))))"
                                    },
                                    "runAfter": {},
                                    "type": "Query"
                                },
                                "SelectActionErrors": {
                                    "inputs": {
                                        "from": "@body('FilterForFailedActions')",
                                        "select": "@addProperty(coalesce(item()?['outputs']?['body'], item()?['error']), 'actionName', item()['name'])"
                                    },
                                    "runAfter": {
                                        "FilterForFailedActions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select"
                                },
                                "SetErrorsVar": {
                                    "inputs": {
                                        "name": "Errors",
                                        "value": "@outputs('BuildErrorsObject')"
                                    },
                                    "runAfter": {
                                        "BuildErrorsObject": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable"
                                }
                            },
                            "runAfter": {
                                "Execute": [
                                    "Failed"
                                ]
                            },
                            "type": "Scope"
                        },
                        "HasErrors": {
                            "actions": {
                                "FailWorkflow": {
                                    "inputs": {
                                        "runStatus": "Failed"
                                    },
                                    "runAfter": {
                                        "NotifyOnError": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate"
                                },
                                "NotifyOnError": {
                                    "inputs": {
                                        "authentication": {
                                            "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": "@concat('{ \"status\": \"Failed\", \"errors\": ', variables('Errors'), ' }')",
                                        "method": "POST",
                                        "uri": "@triggerBody()?['notificationEndpoint']"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                }
                            },
                            "else": {
                                "actions": {
                                    "NotifyOnSuccess": {
                                        "inputs": {
                                            "authentication": {
                                                "audience": "@{triggerBody()?['notificationEndpointAudience']}",
                                                "type": "ManagedServiceIdentity"
                                            },
                                            "body": {
                                                "progress": "100",
                                                "status": "COMPLETED"
                                            },
                                            "method": "POST",
                                            "uri": "@triggerBody()?['notificationEndpoint']"
                                        },
                                        "runAfter": {},
                                        "type": "Http"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@variables('Errors')",
                                                null
                                            ]
                                        }
                                    },
                                    {
                                        "greater": [
                                            "@length(variables('Errors'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "HandleErrors": [
                                    "Succeeded",
                                    "Skipped"
                                ]
                            },
                            "type": "If"
                        },
                        "InitializeAiWorkflowInputEssenceVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AiWorkflowInputEssence",
                                        "type": "Object"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializePreviewLocatorVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeBMContentVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "BMContent",
                                        "type": "Object",
                                        "value": "@json('{ \"@type\": \"BMContent\", \"awsAiMetadata\": {}, \"azureAiMetadata\": {} }')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeRepFilePathVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeDecideTranscodeResultVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "DecideTranscodeResult",
                                        "type": "String"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeTechnicalMetadataVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeErrorsVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Errors",
                                        "type": "Array",
                                        "value": "@json('[]')"
                                    }
                                ]
                            },
                            "runAfter": {},
                            "type": "InitializeVariable"
                        },
                        "InitializeInputFilePathVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "InputFilePath",
                                        "type": "String",
                                        "value": "@{concat(triggerBody()?['input']?['inputFile']?['container'], '/', triggerBody()?['input']?['inputFile']?['filePath'])}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeErrorsVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeProxyLocatorVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ProxyLocator",
                                        "type": "Object"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeDecideTranscodeResultVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeRepFilePathVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RepFilePath",
                                        "type": "String",
                                        "value": "@{concat(formatDateTime(utcNow(), 'yyMMdd'), '/', guid(), if(greaterOrEquals(lastIndexOf(variables('InputFilePath'), '.'), 0), substring(variables('InputFilePath'), lastIndexOf(variables('InputFilePath'), '.')), ''))}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeInputFilePathVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeSourceLocatorVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "SourceLocator",
                                        "type": "Object",
                                        "value": "@json(concat('{ \"@type\": \"BlobStorageFileLocator\", \"storageAccountName\": \"', parameters('mediaStorageAccountName'), '\", \"container\": \"', parameters('repositoryContainerName'), '\", \"filePath\": \"', variables('RepFilePath'), '\" }'))"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeBMContentVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializeTechnicalMetadataVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "TechnicalMetadata",
                                        "type": "Object",
                                        "value": "@json('{}')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeSourceLocatorVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitializePreviewLocatorVar": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "PreviewLocator",
                                        "type": "Object",
                                        "value": "@json(concat('{ \"@type\": \"BlobStorageFileLocator\", \"storageAccountName\": \"', parameters('mediaStorageAccountName'), '\", \"container\": \"', parameters('previewContainerName'), '\", \"filePath\": \"media/', guid(), '.mp4\" }'))"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitializeProxyLocatorVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "tenantId": {
                            "type": "String"
                        },
                        "clientId": {
                            "type": "String"
                        },
                        "clientSecret": {
                            "type": "String"
                        },
                        "mediaStorageAccountName": {
                            "type": "String"
                        },
                        "repositoryContainerName": {
                            "type": "String"
                        },
                        "tempContainerName": {
                            "type": "String"
                        },
                        "previewContainerName": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "HttpTrigger": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "input": {
                                            "properties": {
                                                "@@type": {
                                                    "type": "string"
                                                },
                                                "inputFile": {
                                                    "properties": {
                                                        "@@type": {
                                                            "type": "string"
                                                        },
                                                        "container": {
                                                            "type": "string"
                                                        },
                                                        "filePath": {
                                                            "type": "string"
                                                        },
                                                        "storageAccountName": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "metadata": {
                                                    "properties": {
                                                        "@@type": {
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "type": "string"
                                                        },
                                                        "title": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "jobProfilesEndpoint": {
                                            "type": "string"
                                        },
                                        "notificationEndpoint": {
                                            "type": "string"
                                        },
                                        "resourceEndpoint": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "type": "Request"
                        }
                    }
                }
            }
        }
    ]
}