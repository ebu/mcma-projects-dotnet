def requiredVersionDotnet = "~3.1.0"
def requiredVersionTerraform = "~0.12.19"

allprojects {
    ext {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            dotnetExecutable = ["dotnet"]
            terraformExecutable = ["cmd", "/c", "terraform"]
        } else {
            dotnetExecutable = ["dotnet"]
            terraformExecutable = ["terraform"]
        }
    }
}

static def isSemVerMatching(String actual, String expected) {
    def beginIndex
    def equalParts

    if (expected.startsWith("^")) {
        beginIndex = 1
        equalParts = 1
    } else if (expected.startsWith("~")) {
        beginIndex = 1
        equalParts = 2
    } else {
        beginIndex = 0
        equalParts = 3
    }

    def expectedParts = expected.substring(beginIndex).split(/\./).collect { it as int }
    def actualParts = actual.split(/\./).collect { it as int }

    for (def i = 0; i < expectedParts.size(); i++) {

        if (i < equalParts) {
            if (actualParts[i] != expectedParts[i]) {
                return false
            }
        } else {
            if (actualParts[i] > expectedParts[i]) {
                return true
            }
            if (actualParts[i] < expectedParts[i]) {
                return false
            }
        }
    }

    return true
}

def getVersionDotnet = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine dotnetExecutable
            args "--version"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim()
}

task verifyDotnetVersion {
    inputs.property("VERSION_DOTNET", requiredVersionDotnet)
    outputs.upToDateWhen { isSemVerMatching(getVersionDotnet(), requiredVersionDotnet) }
    doLast {
        def versionDotnet = getVersionDotnet()
        if (!isSemVerMatching(versionDotnet, requiredVersionDotnet)) {
            throw new Exception("Required .NET version " + requiredVersionDotnet + " not installed. Detected version " + versionDotnet)
        }
    }
}

def getVersionTerraform() {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine terraformExecutable
            args "--version"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().split("\n")[0].trim().replace("Terraform v", "")
}

task verifyTerraform {
    def actualVersion = getVersionTerraform()

    inputs.property("VERSION_TERRAFORM", requiredVersionTerraform)
    outputs.upToDateWhen { isSemVerMatching(actualVersion, requiredVersionTerraform) }
    doLast {
        if (!isSemVerMatching(actualVersion, requiredVersionTerraform)) {
            throw new Exception("Required Terraform version " + requiredVersionTerraform + " not found. Detected version " + actualVersion)
        }
    }
}

task build {
    dependsOn "services:build"
}

task packageOutput {
    dependsOn build
    dependsOn "services:packageOutput"
}

task deploy {
    dependsOn packageOutput
    dependsOn "deployment:deploy"
    dependsOn "scripts:post-deploy:run"
}